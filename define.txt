CMD模块定义规范
    在Sea.js中,所有JavaScript模块都遵循CMD(Common Module Definition) 模块定义规范,该规范明确了模块的基本书写格式和基本交互规则
    在CMD规范中,一个模块就是一个文件.代码的书写格式如下:
    define(factory);

    define [Function]
        defien是一个全局函数,用来定义模块

    denfine define(factory)
        define接受factory参数,factory可以是一个函数,也可以是一个对象或字符串.
        factory为对象 字符串时,表示模块的接口就是该对象 字符串.比如可以如下定义一个JSON数据模块
        
            define({'foo':'bar'});

        也可以通过字符串定义模板模块

            define('I am a template.My name is {{name}}.');

        factory为函数时,表示模块的构造方法.执行该构造方法,可以得到模块向外提供的接口.factory方法在执行时,默认会传入三个参数:require export 和module
        
            define(function(require,exports,module){
                模块代码
            })

        define define(id?,deps?,factory)
        
        define也可以接受两个以上参数.字符串id表示模块标识,数组deps是模块依赖,比如:
        
            define('hello',['jquery'],function(require,exports,module){

            })
        id和deps参数可以省略.省略时,可以通过构建工具自动生成
        注意:带id和deps参数的define用法不属于CMD规范,而是属于Modules/Transports规范.

    define.cmd [Object]
        一个空对象,可用来排定当前页面是否有CMD模块加载器:

        if(typeof define === 'function'&&define.cmd){
            //有Sea.js等CMD模块加载器存在
        }

    require [Function]
    require是factory函数的第一参数

    require require(id)
    require是一个方法,接受模块标识作为唯一参数,用来获取其他模块提供的接口.

        define(function(require,exports){
            //获取模块a的接口
            var a=require('./a');
            //调用模块a的方法
            a.doSomething();
        });
    
    
    require.async require.async(id,callback?)
    reqire.async方法用来在模块内部异步加载模块,并在加载完成后执行指定回调,callback参数可选.
        define(function(reqire,exports,module){
            //异步加载一个模块,加载完成时,执行回调
            require.async('./b',function(b){
                b.doSomething();
            })
            
            //异步加载多个模块,在加载完成时,执行回调
            require.async(['./c','./d'],function(c,d){
                c.doSomething();
                d.doSomething();
            })
        });

    注意:require是同步往下执行,require.async则是异步回调执行.require.async一般用来加载可延迟异步加载的模块

    requrie.sesolve require.resolve(id)
    使用模块系统内部的路径解析机制来解析并返回模块路径.该函数不会记载模块,只会返回解析后的绝对路径.
        define(function(require,exports){
            console.log(require.resolve('./b'));        =>http://example.com/path/to/b.js
        })
    
    这可以用来获取模块路径,一般用在插件环境或需动态拼接模块路径的场景下
    
    exports [Object]
    exports是一个对象,用来向外提供模块接口

        define(function(require,exports){
            //对外提供foo属性
            exports.foo='bar';

            //对完提供doSomething方法
            exports.doSomething=function(){}
        });
    
    除了给exports对象增加成员,还可以使用return直接向外提供接口

        define(function(require){
            //通过return直接提供接口
            return{
                foo:'bar',
                doSomething:function(){}
            };
        });
    如果return语句是模块中唯一代码还可以简化为
        define({
            foo:'bar',
            doSomething:function(){}
        })
    上面这种格式特别适合定义JSONP模块.
    特别注意:下面的写法是错误的
        define(function(require,exports){
            //错误写法!!
            exports={
                foo:'bar',
                doSomething:function(){}
            }
        })
    
    正确的写法是用return或者给module.exports赋值
        define(function(require,exports.module){
            //正确写法
            module.epxorts={
                foo:'bar',
                doSomething:function(){}
            };
        });

    提示,exports仅仅是module.exports的一个引用.在factory内部给exports重新赋值时,并不会改变module,.exports的值.因此给exports赋值时无效的,不能用来更改模块接口

    module [Object]
    module是一个对象,上面存储了与当前模块相关联的一些属性和方法.

    module.id [String]
    模块的唯一标识.
        define('id',[],function(require,exports,module){
            //模块代码
        })
    上面代码中,define的第一个参数就是模块标识

    module.uri [String]
    根据模块系统的路径解析规则得到的模块绝对路径.
        define(function(require,exports,module){
            console.log(module.uri);
            //=>http://example.com/path/to/this/file.js
        })
    
    一般情况下(没有define中手写id参数时),module.id的值就是module.uri,两者完全相同

    module.dependencies [Array]
    dependencies是一个数组,表示当前模块的依赖

    module.exports [Object]
    当前模块对外提供的接口
    
    传给factory构造方法的exports参数时module.exports对象的一个引用
    只通过exports参数来提供接口,有时无法满足开发者的所有需求.
    比如当模块的接口是某个类的实例时,需要通过module.exports来实现

        define(function(require,epxorts,module){
            //exports是module.exports的一个引用
            console.log(module.exports === exports); //true

            //重新给module.exports赋值
            module.exports=new SomeClass();

            //exports不等于module.exports
            console.log(module.exports===exports);  //false
        })

    注意:对module.exports的赋值需要同步执行,不能放在回调函数里,下面这样是不行的

        //x.js
        define(function(require,epxorts,module){
            //错误用法
            setTimeout(function(){
                module.exports={a:'hello'}
            },0)
        })
    在y.js里有调用到上面的x.js

        //y.js
        define(function(require,exports,module){
            var x=require('./x');
            //无法立刻得到模块x的属性a
            console.log(x.a)        //undefined
        })
    
    小结
    这就是CMD模块定义范围的所有内容.
    经常使用的API只有define,require,require.asyc,exports,module.exports这五个.
    其他API有个印象就好,在需要是再来查文档,不用刻意去记

    与RequireJS的AMD规范相比,CMD规范尽量保持简单,并与CommonJS和Node.js的Modules规范保持了很大的兼容性
    通过CMD规范书写的模块,可以很容易在Node.js中运行,后续会介绍
    